#include <time.h>
#include "LinearAlgebra/declareFunctions.h"

int main() {

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	// Hessian matrix
	double H[5*5] = {5.4880e-02,   3.4759e-02,   1.8718e-02,   7.6658e-03,   1.7392e-03,
		             3.4759e-02,   2.2478e-02,   1.2387e-02,   5.1899e-03,   1.2008e-03,
		             1.8718e-02,   1.2387e-02,   7.0311e-03,   3.0461e-03,   7.2611e-04,
		             7.6658e-03,   5.1899e-03,   3.0461e-03,   1.3833e-03,   3.4701e-04,
		             1.7392e-03,   1.2008e-03,   7.2611e-04,   3.4701e-04,   9.3352e-05};

	// Gradient vector
	double g[5] = {-10,
	                -2,
	                -1,
	                -0,
	                -3};

	// Lower limits for u
	double ulb_vec[5] = {0,
	                     0,
	                     0,
	                     0,
	                     0};

	// Upper limits for u
	double uub_vec[5] = {1000, 
	                     1000, 
	                     1000, 
	                     1000, 
	                     1000};

	// In Control theory, this can be used to set limits on output signals. Check out my CControl repository
	double A[5*5] = {0.0817484,   0.2287029,   0.9763714,   0.7458876,   0.9765588,
			         0.9391860,   0.4134220,   0.1215486,   0.4066578,   0.9577408,
			         0.3012535,   0.1271539,   0.7819307,   0.6826364,   0.9434415,
			         0.7156182,   0.4673464,   0.6276685,   0.7870804,   0.0052057,
			         0.7922529,   0.5427970,   0.9184718,   0.7077014,   0.4778041};

	// Lower limit for A*u
	double ylb_vec[5] = {0,
						 0,
					     0,
						 0,
						 0};

	// Upper limit for A*u
	double yub_vec[5] = {1000,
	                     1000,
	                     1000,
	                     1000, 
	                    1000};

	int nWSR = 10; // Set this to a number larger than 0
	double u[5]; // Our solution
	quadprog(H, g, A, ulb_vec, uub_vec, ylb_vec, yub_vec, &nWSR, u, 5, 5);

	printf("Optimal solution - Check with Octave code below - :\n");
	print(u, 5, 1);
	printf("Set SHOW_QP_OUTPUT to TRUE to begin with in declareFunctions.h\n");

	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f,", cpu_time_used);
	return 0;
}

/**
 OCTAVE CODE

   H = [5.4880e-02   3.4759e-02   1.8718e-02   7.6658e-03   1.7392e-03
		 3.4759e-02   2.2478e-02   1.2387e-02   5.1899e-03   1.2008e-03
		 1.8718e-02   1.2387e-02   7.0311e-03   3.0461e-03   7.2611e-04
		 7.6658e-03   5.1899e-03   3.0461e-03   1.3833e-03   3.4701e-04
		 1.7392e-03   1.2008e-03   7.2611e-04   3.4701e-04   9.3352e-05];

	g = [-10;-2;-1;-0;-3];


	LB = zeros(5,1)
	UB = 1000*ones(5,1)

	A_LB = zeros(5,1)
	A_IN = [0.0817484   0.2287029   0.9763714   0.7458876   0.9765588
	   0.9391860   0.4134220   0.1215486   0.4066578   0.9577408
	   0.3012535   0.1271539   0.7819307   0.6826364   0.9434415
	   0.7156182   0.4673464   0.6276685   0.7870804   0.0052057
	   0.7922529   0.5427970   0.9184718   0.7077014   0.4778041];
	A_UB = 1000*ones(5,1)

	u = qp([], H, g, [], [], LB, UB, A_LB, A_IN, A_UB)
 */
